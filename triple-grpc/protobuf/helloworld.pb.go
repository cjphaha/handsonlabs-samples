// Code generated by protoc-gen-go. DO NOT EDIT.
// source: helloworld.proto

package protobuf

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

import (
	dubboConstant "dubbo.apache.org/dubbo-go/v3/common/constant"
	"dubbo.apache.org/dubbo-go/v3/protocol"
	dgrpc "dubbo.apache.org/dubbo-go/v3/protocol/grpc"
	"dubbo.apache.org/dubbo-go/v3/protocol/invocation"
	dubbo3 "github.com/dubbogo/triple/pkg/triple"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Dubbo3HelloRequest struct {
	Req                  string   `protobuf:"bytes,1,opt,name=req,proto3" json:"req,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Dubbo3HelloRequest) Reset()         { *m = Dubbo3HelloRequest{} }
func (m *Dubbo3HelloRequest) String() string { return proto.CompactTextString(m) }
func (*Dubbo3HelloRequest) ProtoMessage()    {}
func (*Dubbo3HelloRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_17b8c58d586b62f2, []int{0}
}

func (m *Dubbo3HelloRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Dubbo3HelloRequest.Unmarshal(m, b)
}
func (m *Dubbo3HelloRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Dubbo3HelloRequest.Marshal(b, m, deterministic)
}
func (m *Dubbo3HelloRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dubbo3HelloRequest.Merge(m, src)
}
func (m *Dubbo3HelloRequest) XXX_Size() int {
	return xxx_messageInfo_Dubbo3HelloRequest.Size(m)
}
func (m *Dubbo3HelloRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Dubbo3HelloRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Dubbo3HelloRequest proto.InternalMessageInfo

func (m *Dubbo3HelloRequest) GetReq() string {
	if m != nil {
		return m.Req
	}
	return ""
}

type Dubbo3HelloReply struct {
	Rsp                  string   `protobuf:"bytes,1,opt,name=rsp,proto3" json:"rsp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Dubbo3HelloReply) Reset()         { *m = Dubbo3HelloReply{} }
func (m *Dubbo3HelloReply) String() string { return proto.CompactTextString(m) }
func (*Dubbo3HelloReply) ProtoMessage()    {}
func (*Dubbo3HelloReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_17b8c58d586b62f2, []int{1}
}

func (m *Dubbo3HelloReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Dubbo3HelloReply.Unmarshal(m, b)
}
func (m *Dubbo3HelloReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Dubbo3HelloReply.Marshal(b, m, deterministic)
}
func (m *Dubbo3HelloReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dubbo3HelloReply.Merge(m, src)
}
func (m *Dubbo3HelloReply) XXX_Size() int {
	return xxx_messageInfo_Dubbo3HelloReply.Size(m)
}
func (m *Dubbo3HelloReply) XXX_DiscardUnknown() {
	xxx_messageInfo_Dubbo3HelloReply.DiscardUnknown(m)
}

var xxx_messageInfo_Dubbo3HelloReply proto.InternalMessageInfo

func (m *Dubbo3HelloReply) GetRsp() string {
	if m != nil {
		return m.Rsp
	}
	return ""
}

func init() {
	proto.RegisterType((*Dubbo3HelloRequest)(nil), "protobuf.Dubbo3HelloRequest")
	proto.RegisterType((*Dubbo3HelloReply)(nil), "protobuf.Dubbo3HelloReply")
}

func init() { proto.RegisterFile("helloworld.proto", fileDescriptor_17b8c58d586b62f2) }

var fileDescriptor_17b8c58d586b62f2 = []byte{
	// 143 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xc8, 0x48, 0xcd, 0xc9,
	0xc9, 0x2f, 0xcf, 0x2f, 0xca, 0x49, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x00, 0x53,
	0x49, 0xa5, 0x69, 0x4a, 0x6a, 0x5c, 0x42, 0x2e, 0xa5, 0x49, 0x49, 0xf9, 0xc6, 0x1e, 0x20, 0x35,
	0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x02, 0x5c, 0xcc, 0x45, 0xa9, 0x85, 0x12, 0x8c,
	0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x20, 0xa6, 0x92, 0x0a, 0x97, 0x00, 0x8a, 0xba, 0x82, 0x9c, 0x4a,
	0xb0, 0xaa, 0xe2, 0x02, 0xb8, 0xaa, 0xe2, 0x02, 0xa3, 0x28, 0x2e, 0x5e, 0x88, 0x2a, 0xf7, 0xa2,
	0xd4, 0xd4, 0x92, 0xd4, 0x22, 0x21, 0x4f, 0x2e, 0x6e, 0x24, 0x6d, 0x42, 0x32, 0x7a, 0x30, 0x8b,
	0xf5, 0x30, 0x6d, 0x95, 0x92, 0xc2, 0x21, 0x5b, 0x90, 0x53, 0xa9, 0xc4, 0x90, 0xc4, 0x06, 0x96,
	0x34, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x09, 0x1d, 0x8e, 0xc9, 0xce, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// Dubbo3GreeterClient is the client API for Dubbo3Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Dubbo3GreeterClient interface {
	Dubbo3Hello(ctx context.Context, in *Dubbo3HelloRequest, opts ...grpc.CallOption) (*Dubbo3HelloReply, error)
}

type dubbo3GreeterClient struct {
	cc grpc.ClientConnInterface
}

func NewDubbo3GreeterClient(cc grpc.ClientConnInterface) Dubbo3GreeterClient {
	return &dubbo3GreeterClient{cc}
}

func (c *dubbo3GreeterClient) Dubbo3Hello(ctx context.Context, in *Dubbo3HelloRequest, opts ...grpc.CallOption) (*Dubbo3HelloReply, error) {
	out := new(Dubbo3HelloReply)
	err := c.cc.Invoke(ctx, "/protobuf.Dubbo3Greeter/Dubbo3Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Dubbo3GreeterServer is the server API for Dubbo3Greeter service.
type Dubbo3GreeterServer interface {
	Dubbo3Hello(context.Context, *Dubbo3HelloRequest) (*Dubbo3HelloReply, error)
}

// UnimplementedDubbo3GreeterServer can be embedded to have forward compatible implementations.
type UnimplementedDubbo3GreeterServer struct {
}

func (*UnimplementedDubbo3GreeterServer) Dubbo3Hello(ctx context.Context, req *Dubbo3HelloRequest) (*Dubbo3HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dubbo3Hello not implemented")
}

func RegisterDubbo3GreeterServer(s *grpc.Server, srv Dubbo3GreeterServer) {
	s.RegisterService(&_Dubbo3Greeter_serviceDesc, srv)
}

func _Dubbo3Greeter_Dubbo3Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Dubbo3HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Dubbo3GreeterServer).Dubbo3Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Dubbo3Greeter/Dubbo3Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Dubbo3GreeterServer).Dubbo3Hello(ctx, req.(*Dubbo3HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Dubbo3Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.Dubbo3Greeter",
	HandlerType: (*Dubbo3GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Dubbo3Hello",
			Handler:    _Dubbo3Greeter_Dubbo3Hello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloworld.proto",
}

type dubbo3greeterDubbo3Client struct {
	cc *dubbo3.TripleConn
}

func NewDubbo3GreeterDubbo3Client(cc *dubbo3.TripleConn) Dubbo3GreeterClient {
	return &dubbo3greeterDubbo3Client{cc}
}
func (c *dubbo3greeterDubbo3Client) Dubbo3Hello(ctx context.Context, in *Dubbo3HelloRequest, opt ...grpc.CallOption) (*Dubbo3HelloReply, error) {
	out := new(Dubbo3HelloReply)
	interfaceKey := ctx.Value(dubboConstant.DubboCtxKey(dubboConstant.INTERFACE_KEY)).(string)
	err := c.cc.Invoke(ctx, "/"+interfaceKey+"/Dubbo3Hello", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Dubbo3GreeterClientImpl is the client API for Dubbo3Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Dubbo3GreeterClientImpl struct {
	Dubbo3Hello func(ctx context.Context, in *Dubbo3HelloRequest, out *Dubbo3HelloReply) error
}

func (c *Dubbo3GreeterClientImpl) Reference() string {
	return "dubbo3GreeterImpl"
}

func (c *Dubbo3GreeterClientImpl) GetDubboStub(cc *dubbo3.TripleConn) Dubbo3GreeterClient {
	return NewDubbo3GreeterDubbo3Client(cc)
}

type Dubbo3GreeterProviderBase struct {
	proxyImpl protocol.Invoker
}

func (s *Dubbo3GreeterProviderBase) SetProxyImpl(impl protocol.Invoker) {
	s.proxyImpl = impl
}

func (s *Dubbo3GreeterProviderBase) GetProxyImpl() protocol.Invoker {
	return s.proxyImpl
}

func _DUBBO_Dubbo3Greeter_Dubbo3Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Dubbo3HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dgrpc.DubboGrpcService)
	args := []interface{}{}
	args = append(args, in)
	invo := invocation.NewRPCInvocation("Dubbo3Hello", args, nil)
	if interceptor == nil {
		result := base.GetProxyImpl().Invoke(ctx, invo)
		return result.Result(), result.Error()
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Dubbo3Greeter/Dubbo3Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.GetProxyImpl().Invoke(context.Background(), invo)
		return result.Result(), result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

func (s *Dubbo3GreeterProviderBase) ServiceDesc() *grpc.ServiceDesc {
	return &grpc.ServiceDesc{
		ServiceName: "protobuf.Dubbo3Greeter",
		HandlerType: (*Dubbo3GreeterServer)(nil),
		Methods: []grpc.MethodDesc{
			{
				MethodName: "Dubbo3Hello",
				Handler:    _DUBBO_Dubbo3Greeter_Dubbo3Hello_Handler,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "helloworld.proto",
	}
}
